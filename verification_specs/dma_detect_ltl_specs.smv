-- CODE RESERVED ROM
    SMEM_BASE := 0uh16_A000;
    SMEM_SIZE := 0uh16_4000;
-- KEY RESERVED ROM
    KMEM_BASE := 0uh16_6A00;
    KMEM_SIZE := 0uh16_0040;
-- STACK RESERVED ROM
    SDATA_BASE := 0uh16_0400;
    SDATA_SIZE := 0uh16_0C00;
-- HMAC OUTPUT RESERVED ROM
    HMAC_BASE := 0uh16_0230;
    HMAC_SIZE := 0uh16_0020;
--
    LAST_SMEM_ADDR := SMEM_BASE + SMEM_SIZE - 0uh16_2;
    RESET_HANDLER := 0uh16_0000;

    pc_in_srom := "pc" >= SMEM_BASE & "pc" <= LAST_SMEM_ADDR;
    next_pc_in_srom := next("pc") >= SMEM_BASE & next("pc") <= LAST_SMEM_ADDR;

    pc_not_in_srom := !pc_in_srom; 

    dma_access_key := "dma_en" & "dma_addr" >= KMEM_BASE & "dma_addr" < (KMEM_BASE + KMEM_SIZE);
    dma_access_X_stack := "dma_en" & "dma_addr" >= SDATA_BASE & "dma_addr" < (SDATA_BASE + SDATA_SIZE);

-- Premisses specifications---

-- Reset correctness
LTLSPEC G ("reset" -> (("reset" U "pc" = RESET_HANDLER) | G("reset")));


-- DMA cant access the key
LTLSPEC G (dma_access_key -> "reset");

-- DMA write cant happen while in ROM
LTLSPEC G (("dma_en" & pc_in_srom) -> "reset");

-- Disallow any DMA access to the exclusive stack
LTLSPEC G (dma_access_X_stack -> "reset");

